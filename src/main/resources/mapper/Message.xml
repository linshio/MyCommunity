<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.linshio.community.dao.MessageMapper">

    <!--java字段与数据库字段的映射-->
    <resultMap id="message" type="cn.linshio.community.entity.Message">
        <id column="id" property="id"/>
        <result column="from_id" property="fromId"/>
        <result column="to_id" property="toId"/>
        <result column="conversation_id" property="conversationId"/>
        <result column="create_time" property="createTime"/>
    </resultMap>


    <select id="selectConversations" resultMap="message">
        select *
        from message
        where id in (
            select max(id)
            from message
            where status != 2 and from_id !=1
              and (from_id=#{userId} or to_id=#{userId})
            group by conversation_id
            )
        order by id desc
        limit #{offset}, #{limit}
    </select>

    <select id="selectConversationsCount" resultType="int">
        select count(m.maxid)
        from (
                 select max(id) as maxid from message
                 where status != 2 and from_id !=1
                   and (from_id=#{userId} or to_id=#{userId})
                 group by conversation_id
             ) as m;
    </select>

    <select id="selectLetters" resultMap="message">
        select *
        from message
        where status != 2 and from_id !=1
        and conversation_id = #{conversationId}
        order by id desc
        limit #{offset},#{limit}
    </select>

    <select id="selectLettersCount" resultType="int">
        select count(id)
        from message
        where status != 2 and from_id !=1
          and conversation_id = #{conversationId}
        order by id desc
    </select>

    <select id="selectLettersUnread" resultType="int">
        select count(id)
        from message
        where status=0 and from_id!=1 and to_id = #{userId}
        <if test="conversationId!=null">
            and conversation_id = #{conversationId}
        </if>
    </select>

    <insert id="insertMessage" parameterType="cn.linshio.community.entity.Message" keyProperty="id">
        insert into message (from_id, to_id, conversation_id, content, status, create_time)
        values (#{fromId},#{toId},#{conversationId},#{content},#{status},#{createTime});
    </insert>

    <update id="updateStatus">
        update message
        set status = #{status}
        where id in 
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>
</mapper>